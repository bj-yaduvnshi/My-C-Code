#include <iostream>

using namespace std;

struct Node{
  //  public:
    int data;
    Node * next;
    Node(int x)
    {
        data=x;
        next=NULL;
    }
};
int print(Node *head)//ch
{
    while(head!=NULL)
   { cout<<head->data<<" ";
    head=head->next;
    //   cout<<endl;
   }
}
Node* insertb(Node *head,int x)
{ Node* temp=new Node(x);
temp->next=head;
}

Node* insertend(Node*head,int y)
{Node* temp=new Node(y);
if(head==NULL)
return temp;
Node* curr=head;
while(curr->next!=NULL)
{  curr=curr->next;}
curr->next=  temp;
return head;

}

Node * insert(Node *head,int pos,int z)
{Node* temp=new Node(z);
    
    Node *curr=head;
    if(pos==0)
    {temp->next=head;
    head=temp;
    return head;}
    
    for(int count=0;curr!=NULL && cout<pos-1;count++)//ch
  {  curr=curr->next;

  }
  if(curr!=NULL){
  temp->next=curr->next;
  curr->next=temp;}
  return head;
}

Node* delf(Node *head){
    if(head==NULL)
    return NULL;
    else
    {
        Node *temp=head->next;
        delete head;
        return temp;
    }
}

Node* removeLastNode(struct Node* head)
{
    if (head == NULL)
        return NULL;
 
    if (head->next == NULL) {
        delete head;
        return NULL;
    }
 
    // Find the second last node
    Node* second_last = head;
    while (second_last->next->next != NULL)
        second_last = second_last->next;
 
    // Delete last node
    delete (second_last->next);
 
    // Change next of second last
    second_last->next = NULL;
 
    return head;
}
Node* dele(Node *head){
    if(head==NULL)
    return NULL;
    if(head->next==NULL)
    {delete head;
    return NULL;}
    
    Node *slast=head;
    
    while(slast->next->next!=NULL)
    {slast=slast->next;}
    
    delete (slast->next);
    
  slast->next=NULL;
    return head;
}
Node * deletep(Node *head,int pos)
{
    if(head==NULL)
    {return NULL;}
    
    if(head->next==NULL)
    {delete head;
    return NULL;}
    
   
    Node *curr=head;
    for( int count=0;curr->next!=NULL && count<pos-1; count++)
    {curr=curr->next;
   }
    
    //Node *temp=curr->next;
    Node *temp=curr->next->next;
    delete (curr->next);
   curr->next=temp;
    return head;
    
}

void deleteNode(Node *head, int position)
{
     
    // If linked list is empty
    if (head== NULL)
        return;
     
    // Store head node
    Node* temp = head;
 
    // If head needs to be removed
    if (position == 0)
    {
         
        // Change head
        head = temp->next;
         
        // Free old head
        free(temp);            
        return;
    }
 
    // Find previous node of the node to be deleted
    for(int i = 0; temp != NULL && i < position - 1; i++)
        temp = temp->next;
 
    // If position is more than number of nodes
    if (temp == NULL || temp->next == NULL)
        return;
 
    // Node temp->next is the node to be deleted
    // Store pointer to the next of node to be deleted
     Node *next = temp->next->next;
 
    // Unlink the node from linked list
    free(temp->next); // Free memory
     
    // Unlink the deleted node from list
    temp->next = next;
}
Node *reverse(Node *head)
{
       if(head==NULL || head->next==NULL)
        return head;
       Node *rest= reverse(head->next);
       
       head->next->next=head;
       head->next=NULL;
       return rest;
}
Node *middle(Node*head)
{
    if(head==NULL)
    return NULL;
    Node *slow=head;
    Node *fast=head;
    Node *prev;
    while(fast!=NULL && fast->next!=NULL)
    {   prev=slow;
        slow=slow->next;
        fast=fast->next->next;
    }
   // cout<<slow->data;
    prev->next=slow->next;
    delete(slow);
    return head;
    
}
int main()
{
  //Node *head=NULL;
    Node *head=new Node(10);
    Node *n2=new Node(20);
    
    Node *n3=new Node(30);

    Node *n4=new Node(40);

    Node *n5=new Node(50);
    
    head->next=n2;
    n2->next=n3;
    n3->next=n4;
    n4->next=n5;
    // cout<<head->data<<n2->data;
    print(head);
    cout<<endl;
    head=insertb(head,200);
        print(head);
            cout<<endl;
    insertend(head,60);
        print(head);
            cout<<endl;
          head= insert(head,3,99);
        print(head);
          cout<<endl;
        head=delf(head);
        print(head);
          cout<<endl;
        //  removeLastNode(head);
        //   print(head);
        //   cout<<endl;
          deletep(head,5);
          print(head);
          cout<<endl;
           head= insert(head,5,309);
        print(head);
          cout<<endl;
          head=reverse(head);
          print(head);
          cout<<endl;
         head= middle(head);
          print(head);
          
        
}